version: "3.2"
services:

  # elastic setup with fleet
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    environment:
      - FLEET_URL=${FLEET_URL:-https://fleet:8220}
      - KIBANA_FLEET_HOST=https://kibana:5601
      - ELASTICSEARCH_CA=/usr/share/elasticsearch/config/certs/ca/ca.crt
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
      - FLEET_SERVER_ELASTICSEARCH_HOST=${ELASTICSEARCH_HOSTS:-https://es01:9200}
     
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: es02\n"\
          "    dns:\n"\
          "      - es02\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: es03\n"\
          "    dns:\n"\
          "      - es03\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: fleet\n"\
          "    dns:\n"\
          "      - fleet\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: logstash\n"\
          "    dns:\n"\
          "      - logstash\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: kibana\n"\
          "    dns:\n"\
          "      - kibana\n"\
          "      - elk.yoast.test\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        sleep 30;
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do echo "https://es01:9200 not yet ready" && sleep 5; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "Setting logstash_writer group";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/role/logstash_writer -d "{\"cluster\":[\"manage_index_templates\",\"monitor\",\"manage_ilm\"],\"indices\":[{\"names\":[\"logstash-*\"], \"privileges\":[\"write\",\"create\",\"create_index\",\"manage\",\"manage_ilm\"]}]}" | grep -E -q "^{.role.:{.created.:(false|true)}}"; do sleep 10; done;
        echo "Setting logstash_internal password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/logstash_internal -d "{\"password\":\"${LOGSTASH_PASSWORD}\",\"roles\":[\"logstash_writer\"],\"full_name\":\"Internal Logstash User\"}" | grep -E -q "^{.created.:false}"; do sleep 10; done;
        
        echo "enable fleet";

        Fingerprint=$(openssl x509 -in $${ELASTICSEARCH_CA} -sha256 -fingerprint | grep SHA256 | sed "s/://g" | cut -d "=" -f 2);
        echo ">$$Fingerprint<"
        until curl -s --cacert config/certs/ca/ca.crt -u "$${ELASTICSEARCH_USERNAME}:$${ELASTICSEARCH_PASSWORD}" -X POST $${KIBANA_FLEET_HOST}/api/fleet/setup --header "kbn-xsrf: true" | grep -q '"'"'^{"isInitialized":true,"nonFatalErrors":\[\]}'"'"'; do sleep 10; done;
        echo "fleet enabled";
        curl -s --cacert config/certs/ca/ca.crt -u "$${ELASTICSEARCH_USERNAME}:$${ELASTICSEARCH_PASSWORD}" -X PUT "$${KIBANA_FLEET_HOST}/api/fleet/settings" --header "kbn-xsrf: true" --header "Content-Type: application/json" -d "{\"fleet_server_hosts\":[\"$$FLEET_URL\"]}";
        #curl -s --cacert config/certs/ca/ca.crt -u "$${ELASTICSEARCH_USERNAME}:$${ELASTICSEARCH_PASSWORD}" -X GET "$${KIBANA_FLEET_HOST}/api/fleet/outputs/fleet-default-output"  --header "kbn-xsrf: true";
        curl -s --cacert config/certs/ca/ca.crt -u "$${ELASTICSEARCH_USERNAME}:$${ELASTICSEARCH_PASSWORD}" -X PUT "$${KIBANA_FLEET_HOST}/api/fleet/outputs/fleet-default-output"  --header "kbn-xsrf: true" --header "Content-Type: application/json" -d "{\"name\":\"default\",\"is_default\":true,\"is_default_monitoring\":true,\"type\":\"elasticsearch\",\"hosts\":[\"$$FLEET_SERVER_ELASTICSEARCH_HOST\"],\"ca_trusted_fingerprint\":\"$${Fingerprint}\",\"config_yaml\":\"ssl.certificate_authorities: [\\\"/usr/share/elastic-agent/config/certs/ca/ca.crt\\\"]\"}";
        curl -s --cacert config/certs/ca/ca.crt -u "$${ELASTICSEARCH_USERNAME}:$${ELASTICSEARCH_PASSWORD}" "$${KIBANA_FLEET_HOST}/api/fleet/agent_policies?sys_monitoring=true" --header "kbn-xsrf: true" --header "Accept: */*" --header "Content-Type: application/json" -d "{\"id\":\"fleet-server-policy\",\"name\":\"fleet server policy\",\"description\":\"\",\"namespace\":\"default\",\"monitoring_enabled\":[\"logs\",\"metrics\"],\"has_fleet_server\":true,\"is_default_fleet_server\":true,\"unenroll_timeout\":60}";
        curl -s --cacert config/certs/ca/ca.crt -u "$${ELASTICSEARCH_USERNAME}:$${ELASTICSEARCH_PASSWORD}" "$${KIBANA_FLEET_HOST}/api/fleet/agent_policies?sys_monitoring=true" --header "kbn-xsrf: true" --header "Accept: */*" --header "Content-Type: application/json" -d "{\"id\":\"agent-policy\",\"name\":\"agent policy\",\"description\":\"\",\"namespace\":\"default\",\"monitoring_enabled\":[\"logs\",\"metrics\"],\"has_fleet_server\":false}";
        echo "done fleet enable"
       
        echo "All done!"; 
      '
    healthcheck:
      test: [ "CMD-SHELL", "[ -f config/certs/es01/es01.crt ]" ]
      interval: 1s
      timeout: 5s
      retries: 120
    networks:
      - elastic_net

  es01:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      #- cluster.name=${CLUSTER_NAME}
      #- cluster.initial_master_nodes=es01
      - discovery.type=single-node
      #- discovery.seed_hosts=es02,es03
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.http.ssl.verification_mode=certificate
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
      #- "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - "ES_JAVA_OPTS=-Xmx256m -Xms256m"
      - xpack.security.authc.api_key.enabled=true

    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'"
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - elastic_net

  kibana:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
   
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=${ELASTICSEARCH_HOSTS:-https://es01:9200}
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - SERVER_SSL_ENABLED=true
      - SERVER_SSL_CERTIFICATE=config/certs/kibana/kibana.crt
      - SERVER_SSL_KEY=config/certs/kibana/kibana.key 
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert /usr/share/kibana/config/certs/ca/ca.crt -I https://localhost:5601 | grep -q 'HTTP/1.1 302 Found'"
        ]
      interval: 10s
      timeout: 10s
      retries: 120 
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    networks:
      - elastic_net

  fleet:
    depends_on:
      kibana:
        condition: service_healthy
      setup:
        condition: service_completed_successfully
    image: docker.elastic.co/beats/elastic-agent:${STACK_VERSION}
    healthcheck:
      test: "curl -fk https://127.0.0.1:8220/api/status | grep HEALTHY 2>&1 >/dev/null"
      retries: 12
      interval: 5s
    hostname: fleet
    container_name: fleet
    restart: always
    user: root
    environment:
      - FLEET_SERVER_ENABLE=true
      - FLEET_URL=${FLEET_URL:-https://fleet:8220}
      - FLEET_CA=/usr/share/elastic-agent/config/certs/ca/ca.crt
      - FLEET_SERVER_ELASTICSEARCH_HOST=${ELASTICSEARCH_HOSTS:-https://es01:9200}
      - FLEET_SERVER_ELASTICSEARCH_CA=/usr/share/elastic-agent/config/certs/ca/ca.crt
      - FLEET_SERVER_CERT=/usr/share/elastic-agent/config/certs/fleet/fleet.crt
      - FLEET_SERVER_CERT_KEY=/usr/share/elastic-agent/config/certs/fleet/fleet.key
      #- FLEET_SERVER_SERVICE_TOKEN=${SERVICE_TOKEN}
      #- FLEET_ENROLLMENT_TOKEN=${FLEET_TOKEN}
      - FLEET_SERVER_POLICY=fleet-server-policy
      - CERTIFICATE_AUTHORITIES=/usr/share/elastic-agent/config/certs/ca/ca.crt
      - FLEET_SERVER_ELASTICSEARCH_USERNAME=elastic
      - FLEET_SERVER_ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
      - FLEET_SERVER_POLICY_NAME=fleet-server-policy
      - KIBANA_FLEET_SETUP=false
      - "KIBANA_FLEET_HOST=https://kibana:5601"
      - KIBANA_FLEET_USERNAME=elastic
      - KIBANA_FLEET_PASSWORD=${ELASTIC_PASSWORD}
      - KIBANA_FLEET_CA=/usr/share/elastic-agent/config/certs/ca/ca.crt
      - "ELASTICSEARCH_HOSTS=${ELASTICSEARCH_HOSTS:-https://es01:9200}"
      - ELASTICSEARCH_CA=/usr/share/elastic-agent/config/certs/ca/ca.crt
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
    ports:
      - 8220:8220
    networks:
      - elastic_net
    volumes:
      - certs:/usr/share/elastic-agent/config/certs
      - /var/run/docker.sock:/var/run/docker.sock
 
    
volumes:
  certs:
    external: true
  esdata01:
    driver: local
  esdata02:
    driver: local
  esdata03:
    driver: local
  kibanadata:
    driver: local

networks:
  elastic_net:
    driver: bridge
    name: yoast-docker
